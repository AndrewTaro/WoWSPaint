(def constant WoWSPaint_PALETTE_COLORS [
	"SC.Ui_styles.SERVICE_COLORS.WHITE",
	0xFFFF0000,
	0xFF00FF00,
	0xFF0000FF,
	0xFF000000,
	"SC.Ui_styles.SERVICE_COLORS.RED",
	"SC.Ui_styles.SERVICE_COLORS.GREEN",
	"SC.Ui_styles.SERVICE_COLORS.LIGHT_BLUE",
])
(def constant WoWSPaint_PALETTE_COLUMN_COUNT "4")

(def element WorldOfWarshipsPaint() layout=true
	(scope
		(macro STAGE_SIZE)
		(event evMouseDown)
		(event evMouseMove)
		(event evMouseUp)
		(event evMouseInactive)
		(event evStartDraw)
		(event evStopDraw)
		(event evClearDraw)
		(event evChangeColor)

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var isDrawing:bool = "$event.isDrawing" watch=false init=false (event "evStartDraw") (event "evStopDraw"))

		(var lineColor:number = "SC.Ui_styles.SERVICE_COLORS.WHITE" watch=false)
		(bind lineColor "$event.color" watch=false (event "evChangeColor"))
	)

	(style
		(bind height "stageHeight")
		(bind width "stageWidth")
	)

	(dispatch evMouseInactive (bind enabled "!isMouseActive") (bind trigger "isMouseActive"))
	(dispatch evStartDraw args="{isDrawing:true, x: $event.x, y: $event.y}" (event "evMouseDown"))
	(dispatch evStopDraw args="{isDrawing:false}" (event "evMouseUp") (event "evMouseInactive"))
	#(dispatch evClearDraw args="{}" delay=3 (event "evMouseInactive"))
	(macro eventChecker "evClearDraw")

	#canvas
	(block
		(style
			(width = "100%")
			(height = "100%")
			(hitTest = false)
			(position = "absolute")
		)

		(dispatch evMouseDown args="{x: $event.stageX, y: $event.stageY}" on='stageMouseDown')
		(dispatch evMouseUp args="{}" on='stageMouseUp')
		(dispatch evMouseMove on='stageMouseMove' args="{x: $event.stageX, y: $event.stageY}" (bind enabled "isDrawing"))

		(.graphics
			(lineStyle "3" "0xFFFFFFFF")
			(bindcall moveTo "$event.x" "$event.y" (event "evStartDraw"))
			(bindcall lineTo "$event.x" "$event.y" (event "evMouseMove"))
			(bindcall clear (event "evClearDraw"))
			(bindcall lineStyle "3" "lineColor" (event "evClearDraw"))
		)
		(tf
			(bind text "isDrawing")
		)
	)

	#controls
	(element WoWSPaint_ControlElement _currentColor="lineColor")
)

(def element WoWSPaint_ControlElement(_currentColor:number)
	(style
		(position = "absolute")
		(left = 400)
		(bottom = 5)
	)
	(block
		(mc contrast_panel
			(class $FullsizeAbsolute)
		)
		(vtile
			(style
				(hitTest = true)
				(vgap = 10px)
				(align = "middle|center")
				(padding = 10px)
			)
	
			#reset
			(element WoWSPaint_ResetButtonElement)

			#color palette
			(element WoWSPaint_ColorPaletteElement _currentColor="_currentColor")
		)
	)
)

(def element WoWSPaint_ResetButtonElement()
	(scope
		(event evClearDraw)
		(macro MOUSE_HANDLER_SCOPE)

		(var isDown:bool = "mouseDown")
		(var isRollover:bool = "rollOver")

		(var ctRollOver:dict = "{ redMultiplier: 1,	greenMultiplier: 1,	blueMultiplier: 1,	alphaMultiplier: 1,
								  redOffset: 15,	greenOffset: 15,	blueOffset: 15,		alphaOffset: 0 }")
		(var ctDown:dict = "	{ redMultiplier: 1,	greenMultiplier: 1,	blueMultiplier: 1,	alphaMultiplier: 1,
								  redOffset: -15,	greenOffset: -15,	blueOffset: -15,	alphaOffset: 0 }")
	)

	(hblock
		(style
			(align = "middle|center")
		)
		(tf
			(text = "'CLEAR CANVAS'")
			(class $TextDefaultBoldNM)
			(style
				(marginRight = 10px)
			)
		)
		(block
			(style
				(width = 18)
				(height = 18)
				(backgroundImage = "'url:../service_kit/buttons/context/update.png'")
			)
		)

		(bind colorTransform "	isRollover && !isDown	? ctRollOver :
								isDown					? ctDown
														: CT_NONE")

		(dispatch evClearDraw on='click' args="{}" dir="EventDirection.UP")
		(dispatch evRollOver on='rollOver' args="{}" dir="EventDirection.NONE")
		(macro MOUSE_HANDLER
			_soundSet = "'button_context'"
		)
	)
)

(def element WoWSPaint_ColorPaletteElement(_currentColor:number)
	(scope
		(var columnCount:number = "4")
	)

	(vtile
		(style
			(gap = 6px)
		)
		(controller $Repeat renderer='WoWSPaint_ColorPaletteRowElement' count="ceil(WoWSPaint_PALETTE_COLORS.length / WoWSPaint_PALETTE_COLUMN_COUNT)"
			(args
				_currentColor="_currentColor"
			)
		)
	)
)

(def element WoWSPaint_ColorPaletteRowElement(_currentColor:number)
	(scope
		(var colorIndexOffset:number = "$index * WoWSPaint_PALETTE_COLUMN_COUNT")
		# $index == rowIndex
	)

	(htile
		(style
			(hgap = 6px)
		)
		(controller $Repeat renderer='WoWSPaint_ColorTileElement' count="WoWSPaint_PALETTE_COLUMN_COUNT"
			(args
				_color="WoWSPaint_PALETTE_COLORS[colorIndexOffset + $index]"
				_currentColor="_currentColor"
			)
		)
	)
)

(def element WoWSPaint_ColorTileElement(_color:number, _currentColor:number)
	(scope
		(event evChangeColor)
		(var colorValue:number = "_color")
		(var isSelected:bool = "colorValue == _currentColor")

		(var paletteSize:number = "29")
		(var palettePos:number = "paletteSize / 2")
	)

	(bind visible "_color")
	
	(block
		(style
			(width = 25px)
			(height = 25px)
			#(margin = 3)
		)
		(block
			(style
				(position = "absolute")
				(width = "paletteSize")
				(height = "paletteSize")
				(left = "palettePos")
				(top = "palettePos")
				(pivotX = 50%)
				(pivotY = 50%)
				(bind backgroundColor "SC.Ui_styles.SERVICE_COLORS.YELLOW")
			)
			(controller $Animation
				(bindcall play
					duration=0.3
					repeatCount=2
					from={alpha:1.0}
					to={alpha:0.0}
					(bind enabled "isSelected") (bind trigger "isSelected")
				)
				(bindcall play
					duration=0.1
					delay=0.6
					to={alpha:1.0}
					(bind enabled "isSelected") (bind trigger "isSelected")
				)
			)
			(bind visible "isSelected")
		)
		(block
			(style
				(position = "absolute")
				(width = 100%)
				(height = 100%)
				(left = "palettePos")
				(top = "palettePos")
				(pivotX = 50%)
				(pivotY = 50%)
				(bind backgroundColor "colorValue")
			)
		)
	)

	(dispatch evChangeColor on='click' args="{color: colorValue}" dir="EventDirection.UP")
	(macro MOUSE_HANDLER
		_soundSet = "'button_context'"
	)
)